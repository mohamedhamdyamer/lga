---
name: On Push
on: push
permissions: { }

env:
  AWS_REGION: us-east-1
  ECR_REPO: lga
  ECS_SERVICE: lga-service
  ECS_CLUSTER: lga-amer-ecs-cluster
  ECS_TASK_DEFINITION: .aws/task-definition-nginx.json
  CONTAINER_NAME: nginx-amer

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      statuses: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Run Super-Linter
        uses: super-linter/super-linter@v6.3.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure the AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push an image to Amazon ECR
        id: build-image
        env:
          ECR_REG: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: nginx-amer-${{ github.ref_name }}-${{ github.sha }}
        run: |
          # Build a docker container, push it to ECR, and deploy to ECS
          docker build -t "$ECR_REG/$ECR_REPO:$IMAGE_TAG" .
          docker push "$ECR_REG/$ECR_REPO:$IMAGE_TAG"
          echo "image=$ECR_REG/$ECR_REPO:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: Fill in the new image ID into the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.2.0
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy an Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  test:
    name: test the newly deployed code (manually ...)
    runs-on: ubuntu-latest
    environment: manual-step
    steps:
      - name: test manually and approve or ask for re-coding
        run: |
          echo "Manual Approval is required!"
